/**
 * Message Model
 * Stores sent and received WhatsApp messages
 */

const { DataTypes, Model } = require('sequelize');
const { sequelize } = require('../config/database');

class Message extends Model {
  /**
   * Check if message is sent
   * @returns {boolean} Sent status
   */
  isSent() {
    return this.status === 'sent' || this.status === 'delivered' || this.status === 'read';
  }

  /**
   * Check if message is delivered
   * @returns {boolean} Delivered status
   */
  isDelivered() {
    return this.status === 'delivered' || this.status === 'read';
  }

  /**
   * Check if message is read
   * @returns {boolean} Read status
   */
  isRead() {
    return this.status === 'read';
  }

  /**
   * Update message status
   * @param {string} status - New status
   */
  async updateStatus(status) {
    const updates = { status };
    
    if (status === 'sent') {
      updates.sent_at = new Date();
    } else if (status === 'delivered') {
      updates.delivered_at = new Date();
    } else if (status === 'read') {
      updates.read_at = new Date();
    }
    
    await this.update(updates);
  }
}

Message.init(
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    session_id: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'sessions',
        key: 'id',
      },
      onDelete: 'CASCADE',
    },
    whatsapp_message_id: {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'WhatsApp internal message ID',
    },
    direction: {
      type: DataTypes.ENUM('inbound', 'outbound'),
      allowNull: false,
    },
    from: {
      type: DataTypes.STRING,
      allowNull: false,
      comment: 'Sender phone number',
    },
    to: {
      type: DataTypes.STRING,
      allowNull: false,
      comment: 'Recipient phone number',
    },
    type: {
      type: DataTypes.ENUM('text', 'image', 'video', 'audio', 'document', 'location', 'contact', 'sticker'),
      allowNull: false,
      defaultValue: 'text',
    },
    content: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Message text content',
    },
    media_url: {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'URL to media file',
    },
    media_mime_type: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    media_size: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'Media file size in bytes',
    },
    thumbnail_url: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    caption: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Caption for media messages',
    },
    location: {
      type: DataTypes.JSONB,
      allowNull: true,
      comment: 'Location data: {latitude, longitude, name, address}',
    },
    contact: {
      type: DataTypes.JSONB,
      allowNull: true,
      comment: 'Contact card data',
    },
    status: {
      type: DataTypes.ENUM('pending', 'sent', 'delivered', 'read', 'failed'),
      defaultValue: 'pending',
    },
    error_message: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    sent_at: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    delivered_at: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    read_at: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    metadata: {
      type: DataTypes.JSONB,
      defaultValue: {},
      comment: 'Additional message metadata',
    },
    // AI_INTEGRATION_POINT: Add fields for AI analysis results
    ai_sentiment: {
      type: DataTypes.STRING,
      allowNull: true,
      comment: 'AI-detected sentiment: positive, negative, neutral',
    },
    ai_spam_score: {
      type: DataTypes.FLOAT,
      allowNull: true,
      comment: 'AI spam detection score (0-1)',
    },
    ai_auto_reply: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      comment: 'Whether this message was auto-generated by AI',
    },
  },
  {
    sequelize,
    modelName: 'Message',
    tableName: 'messages',
    indexes: [
      {
        fields: ['session_id'],
      },
      {
        fields: ['whatsapp_message_id'],
      },
      {
        fields: ['direction'],
      },
      {
        fields: ['from'],
      },
      {
        fields: ['to'],
      },
      {
        fields: ['type'],
      },
      {
        fields: ['status'],
      },
      {
        fields: ['created_at'],
      },
    ],
  }
);

module.exports = Message;

